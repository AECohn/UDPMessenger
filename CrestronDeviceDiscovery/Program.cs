using System;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace UDPServer
{

    class Program
    {
        static bool IsListening;

        public static void Main(string[] args)
        {
            
            Send("224.0.0.1", 41794, new byte[] { 0x14, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x03, 0x00, 0x00, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
            Listen(41794).Wait();
            Console.ReadKey(); ;
        }

        static void Send(string Address, int Port, byte[] Message)
        {
            

            var messageBytes = Message;

            try
            {
                UdpClient udp = new UdpClient();
                if (Address == "224.0.0.1")
                {
                    udp.JoinMulticastGroup(System.Net.IPAddress.Parse(Address));
                }


                udp.Send(messageBytes, messageBytes.Length, Address, Port);


            }

            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                string test = "banana";
                
            }
        }

        static async Task Listen(int port)
        {

            UdpReceiveResult result;
            using (UdpClient receiveClient = new UdpClient(port))
            {
                IsListening = true;
                try
                {

                    while (IsListening)
                    {
                        result =  await receiveClient.ReceiveAsync();

                        if (result.Buffer.Length > 0)
                        {
                            var stringResult = Encoding.Default.GetString(result.Buffer);
                            var DeviceInfo = stringResult.Split('\0').Where(x => !string.IsNullOrEmpty(x)).Where(str => Regex.IsMatch(str, @"[a-zA-Z0-9]")).ToList();
                            DeviceInfo.Add(result.RemoteEndPoint.Address.ToString());
                            DeviceInfo.Add(result.RemoteEndPoint.Port.ToString());

                            foreach (var item in DeviceInfo)
                            {
                                Console.WriteLine(item);
                            }
                            Console.WriteLine();
                            //Console.WriteLine($"Device: {Encoding.Default.GetString(result.Buffer)} {"\n"} Address: {result.RemoteEndPoint.Address} {"\n"} Port: {result.RemoteEndPoint.Port}");
                        }                       
                    }
                }
                catch (Exception e)
                {
                    //not yet implemented
                }
            }
        }

    }
}